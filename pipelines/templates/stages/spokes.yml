parameters:
- name: spokes
  type: object
- name: environment
  type: string
- name: serviceConnectionName
  type: string
stages:
- ${{ each region in parameters.spokes.azure }}:
  - ${{ each spoke in region.spokes }}:
    - stage: ${{ replace(spoke, '-', '_') }}SpokeDeploymentStage
      # dependsOn: [
      #   ${{ replace(region.key, '-', '_') }}TransitsDeploymentStage
      #   ]
      displayName: Azure ${{ spoke.key }} Deployment
      variables:
        - group: aviatrix-variables
      jobs:
        - job: SpokesDeploymentJob
          displayName: Spokes Deployment
          variables:
            terraform_path: $(System.DefaultWorkingDirectory)/terraform/${{ parameters.environment }}/azure/${{ spoke.key }}/spokes/${{ spoke.value }}
            plan_file: azure_spokes
            ${{ if eq(variables['Build.Reason'], 'PullRequest' ) }}:
              deploy: ""
            ${{ if ne(variables['Build.Reason'], 'PullRequest' ) }}:
              deploy: "terraform -chdir=${{ variables.terraform_path }} apply ${{ variables.plan_file }}"
          steps:
            - template: ../common.yml
              parameters:
                serviceConnectionName: ${{ parameters.serviceConnectionName }}
  
          # - script: |
          #     terraform -chdir=${{ variables.terraform_path }} init \
          #     terraform -chdir=${{ variables.terraform_path }} plan -out=${{ variables.plan_file }} \
          #     ${{ variables.deploy }}
          #   displayName: Deploy Azure Transits via Terraform
          #   env:
          #     ARM_CLIENT_ID: $(SERVICE_PRINCIPAL_ID)
          #     ARM_SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
          #     ARM_TENANT_ID: $(TENANT_ID)
          #     ARM_CLIENT_SECRET: $(SERVICE_PRINCIPAL_KEY)