parameters:
- name: environment
  type: string
- name: serviceConnectionName
  type: string

stages:
- stage: ControllerDeploymentStage
  displayName: Aviatrix Controller Deployment
  variables:
    - group: ${{ parameters.environment }}-state
    - group: ${{ parameters.environment }}-controller
  jobs:
    - job: ControllerDeploymentJob
      displayName: Aviatrix Controller Deployment
      variables:
        terraform_path: $(System.DefaultWorkingDirectory)/terraform/${{ parameters.environment }}/management/controller
        plan_file: controller
        plan: "terragrunt plan -out=${{ variables.plan_file }}"
        ${{ if eq(variables['Build.Reason'], 'PullRequest' ) }}:
          deploy: ""
        ${{ if ne(variables['Build.Reason'], 'PullRequest' ) }}:
          deploy: "terragrunt apply ${{ variables.plan_file }}"
      steps:
        - template: ../common.yml
          parameters:
            serviceConnectionName: ${{ parameters.serviceConnectionName }}

        - script: |
            cd $(terraform_path)
            terragrunt init
            ${{ variables.plan }}
            ${{ variables.deploy }}
          displayName: Deploy Controller via Terraform
          env:
            REMOTE_STATE_RESOURCE_GROUP: $(stateResourceGroupName)
            REMOTE_STATE_STORAGE_ACCOUNT: $(stateStorageAccountName)
            USER_PUBLIC_IP_ADDRESS: $(userPublicIpAddress)
            BUILD_AGENT_PUBLIC_IP_ADDRESS: $(buildAgentPublicIpAddress)
            AZURE_ACCESS_ACCOUNT: $(aviatrixAzureAccessAcountName)
            CONTROLLER_CUSTOMER_ID: $(aviatrixCustomerId)
            ADMIN_EMAIL: $(adminEmail)
            ARM_CLIENT_ID: $(SERVICE_PRINCIPAL_ID)
            ARM_SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
            ARM_TENANT_ID: $(TENANT_ID)
            ARM_CLIENT_SECRET: $(SERVICE_PRINCIPAL_KEY)